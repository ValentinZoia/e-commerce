generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL_DEV")
}

model Product {
  id                       String         @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  description              String
  price                    Float
  discountPercentage       Float?          // 0-1 (ej: 0.2 = 20%)
  cashPrice                Float?
  cashDiscountPercentage   Float?          // 0-1
  stock                    Int            @default(0)
  sizes                    Sizes[]
  currentSize              String?
  freeShippingThreshold    Float?         //Si se supera este monto es envio gratis.
  isFreeShipping           Boolean        @default(false) // Tiene envio gratis?
  isFeatured               Boolean       @default(false)
  isPromotion              Boolean       @default(false)
  isNew                    Boolean       @default(false)
  categoryId               String         
  category                 Category       @relation(fields: [categoryId], references: [name], onDelete:Cascade)
  installments             Installments[] // Relación 1-a-muchos
  images                   String[]
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt

  // Validaciones adicionales (se implementan en lógica de negocio)
  // @@index([name]) // Opcional para búsquedas frecuentes
}

//Estas serian las cuatas del producto ej(quantity :3 ; amount : 500. 3 cuotas de $500)
type Installments {
  
  quantity  Int
  amount    Float
  
}

type Sizes{
  
  name      String
  stock     Int
  
}


model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  slug        String     @unique
  description String?
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Admin {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  username    String     @unique
  password    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Order {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  // Datos del cliente
  customerPhone  String      // WhatsApp phone (required)
  customerEmail  String?
  customerName   String      // "Nombre Apellido"
  customerNotes  String?     // Comentarios del cliente

  //Productos
  products        OrderItem[] 

  //Flujo de compra/WhatsApp
  whatsappMessage String?
  whatsappStatus  String      @default("pending") //"pending" | "sent" | "responded" | "completed" | "expired"
  paymentMethod   String?     //Se completa en WhatsApp

  //Totales
  subtotal        Float
  shippingCost    Float?
  total           Float
  isFreeShipping  Boolean     @default(false)

  //Fechas importantes
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  whatsappSentAt DateTime?   // Cuando se envió el mensaje
  completedAt    DateTime?   // Cuando se completó
  expiredAt      DateTime?   // Marcado cuando el sistema la expira

  // Índices para búsquedas frecuentes
  @@index([whatsappStatus])
  @@index([createdAt])
}

model Checkout {
  id          String   @id @map("_id") //generado por mi cuando creo el registro. 
  userId      String   
  createdAt DateTime @default(now())
  expiresAt         DateTime 
  @@unique(userId)
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String   @db.ObjectId
  productId   String   // Referencia al ID del producto (no como relación)
  productName String   // Nombre en el momento de la compra
  quantity    Int      @default(1)
  size        String?
  unitPrice   Float    // Precio en el momento de la compra
  discount    Float?   @default(0)
  imageUrl    String?  // URL de la imagen principal
}